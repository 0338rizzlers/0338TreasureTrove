#include <stdio.h>
#include <kipr/wombat.h>

#define FL 2
#define FR 3
#define RL 1
#define RR 0

// Move function
int black_factor_2 = 1863;
int black_factor_1 = 2067;
float factor_entrees = 0.05;
    float factor_trays = -0.1;

void move(int mtrFLpwr, int mtrFRpwr, int mtrRLpwr, int mtrRRpwr, int time) {
    cmpc(FL); 
    cmpc(FR); 
    cmpc(RL); 
    cmpc(RR);
    mav(FL, -mtrFLpwr * 0.95);
    mav(FR,  mtrFRpwr * 0.95);
    mav(RL, -mtrRLpwr * 0.95);
    mav(RR,  mtrRRpwr * 0.95);
    msleep(time);
    ao();
    printf("FL: %d\n", gmpc(FL));
    printf("FR: %d\n", gmpc(FR));
    printf("RL: %d\n", gmpc(RL));
    printf("RR: %d\n", gmpc(RR));
}

void move2(int mtrRRpwr, int mtrRLpwr, int mtrFRpwr, int mtrFLpwr) {
    mav(RR, mtrRRpwr);
    mav(RL, -mtrRLpwr * 0.95);
    mav(FR, mtrFRpwr);
    mav(FL, -mtrFLpwr * 0.95);
    
}
void mws(int mtrFLpwr, int mtrFRpwr, int mtrRLpwr, int mtrRRpwr, int ttd) {//ttd = time to deactivation. this is the time in between when the switch is triggered and when the motor actually stops
    cmpc(FL); 
    cmpc(FR); 
    cmpc(RL); 
    cmpc(RR);
    mav(FL, -mtrFLpwr * 0.95);
    mav(FR,  mtrFRpwr * 0.95);
    mav(RL, -mtrRLpwr * 0.95);
    mav(RR,  mtrRRpwr * 0.95);
    while(digital(0) == 0){
        msleep(1);
    }
    msleep(ttd);
    ao();
    printf("FL: %d\n", gmpc(FL));
    printf("FR: %d\n", gmpc(FR));
    printf("RL: %d\n", gmpc(RL));
    printf("RR: %d\n", gmpc(RR));
}
// Slow Servo function
void servo(int port, int position, int speed) {
    int servo_position = get_servo_position(port);
    while (servo_position != position) {
        if (servo_position > position) servo_position--;
        else if (servo_position < position) servo_position++;
        set_servo_position(port, servo_position);
        msleep(speed);
    }
}

#include <stdlib.h> // Needed for labs()

void line_follow(int distance, int speed, float factor, int port) {
    cmpc(0);
    while (labs(gmpc(0)) < distance) {
        int error = analog(2) - black_factor_2;
        float diff = factor_trays * error;
        move2(speed - diff, speed + diff, speed - diff, speed + diff);
        printf("analog: %d   correction: %f   Motor: %ld   Distance: %d\n",
               analog(2), diff, gmpc(0), distance);
    }
    move2(0, 0, 0, 0);
    msleep(20);
}

void line_follow2(int distance, int speed, float factor, int port) {
    cmpc(0);
    while (labs(gmpc(0)) < distance) {
        int error = analog(1) - black_factor_1;
        float diff = factor_entrees * error;
        move2(speed + diff, speed - diff, speed + diff, speed - diff);
        printf("analog: %d   correction: %f   error %d, Motor: %ld   Distance: %d\n",
               analog(1), diff, error, gmpc(0), distance);
    }
    move2(0, 0, 0, 0);
    msleep(20);
}
